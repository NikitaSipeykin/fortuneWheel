/* делаем везде так, чтобы свойства width и height задавали не размеры контента, а размеры блока */
* {
  box-sizing: border-box;
}

/* общие настройки страницы */
body {
  /* подключаем сетку */
  display: grid;
  /* ставим всё по центру */
  place-items: center;
  /* если что-то не помещается на своё место — скрываем то, что не поместилось */
  overflow: hidden;
  background: url("/images/bg.webp") no-repeat;
  background-size: 100% 100%;
}

/* ======================= основное колесо =========================== */
/* ======================= основное колесо =========================== */
/* ======================= основное колесо =========================== */

.hidden {
  display: none;
}

.character_space {
  margin-top: 20px;
  text-align: center;
  position: absolute;
  top: 120px;
}

.team {
  left: 20px;
}

.enemy {
  right: 20px;
}

.character_box {
  display: flex;
  justify-content: center;
  gap: 10px;
  flex-direction: column;
}

.character_slot {
  width: 80px;
  height: 80px;
  border: 2px solid #ccc;
  display: flex;
  overflow: hidden;
  background-color: #0000;
}

.character_slot img {
  width: 100%;
  height: auto;
  object-fit: cover;
}

ul {
  padding-inline-start: 0;
}

/* общий блок для всех элементов */
.wheel {
  /* задаём переменные блока */
  /* размеры колеса */
  --size: clamp(250px, 80vmin, 700px);
  /* настройки яркости и заливки фона секторов */
  --lg-hs: 0 3%;
  --lg-stop: 50%;
  --lg: linear-gradient(hsl(var(--lg-hs) 0%) 0 var(--lg-stop),
      hsl(var(--lg-hs) 20%) var(--lg-stop) 100%);
  /* добавляем позиционирование относительно других элементов */
  position: relative;
  /* подключаем сетку */
  display: grid;
  grid-gap: calc(var(--size) / 20);
  /* выравниваем содержимое блока по центру */
  align-items: center;
  /* задаём имена областей внутри сетки */
  grid-template-areas:
    "spinner"
    "trigger";
  /* устанавливаем размер шрифта */
  font-size: calc(var(--size) / 21);
}

/* всё, что относится ко внутренним элементам главного блока, будет находиться в области сетки с названием spinner */
.wheel>* {
  grid-area: spinner;
}

/* сам блок и кнопка будут находиться в области сетки с названием trigger и будут выровнены по центру */
.wheel .btn {
  grid-area: trigger;
  justify-self: center;
}

/* сектор колеса */
.spinner-box {
  /* добавляем относительное позиционирование */
  position: relative;
  /* подключаем сетку */
  display: grid;
  /* выравниваем всё по центру */
  align-items: center;
  /* добавляем элемент в сетку */
  grid-template-areas: "spinner";
  /* устанавливаем размеры */
  width: var(--size);
  height: var(--size);
  /* поворачиваем элемент  */
  transform: rotate(calc(var(--rotate, 25) * 1deg));
  /* рисуем круглую обводку, а всё, что не поместится, — будет скрыто за кругом */
  border-radius: 50%;

}

.spinner {
  opacity: 0%;
}

/* всё, что внутри этого блока, будет находиться в области сетки с названием spinner */
.spinner-box * {
  grid-area: spinner;
}

/* текст на секторах */
.prize {
  /* включаем «гибкую» вёрстку */
  display: flex;
  align-items: center;
  /* задаём отступы от краёв блока */
  padding: 0 calc(var(--size) / 6) 0 calc(var(--size) / 20);
  /* устанавливаем размеры */
  width: 50%;
  height: 50%;
  /* устанавливаем координаты, относительно которых будем вращать текст */
  transform-origin: center right;
  /* поворачиваем текст */
  transform: rotate(var(--rotate));
  /* запрещаем пользователю выделять мышкой текст на секторах */
  user-select: none;
}

/* язычок */
.ticker {
  /* добавляем относительное позиционирование */
  position: relative;
  /* устанавливаем размеры */
  left: calc(var(--size) / -15);
  width: calc(var(--size) / 10);
  height: calc(var(--size) / 20);
  /* фон язычка */
  background: var(--lg);
  /* делаем так, чтобы язычок был выше колеса */
  z-index: 1;
  /* форма язычка */
  clip-path: polygon(20% 0, 100% 50%, 20% 100%, 0% 50%);
  /* устанавливаем точку, относительно которой будет вращаться язычок при движении колеса */
  transform-origin: center left;
}

/* кнопка запуска колеса */
.btn {
  color: white;
  background: black;
  border: none;
  /* берём размер шрифта такой же, как в колесе */
  font-size: inherit;
  /* добавляем отступы от текста внутри кнопки */
  padding: 0.9rem 2rem 1rem;
  /* скругляем углы */
  border-radius: 0.5rem;
  /* меняем внешний вид курсора над кнопкой на руку*/
  cursor: pointer;
}

/* если кнопка нажата и неактивна */
.btn:disabled {
  /* меняем внешний вид курсора */
  cursor: progress;
  /* делаем кнопку полупрозрачной */
  opacity: 0.25;
}

/* анимация вращения */
.is-spinning .spinner-box {
  transition: transform 8s cubic-bezier(0.1, -0.01, 0, 1);
}

/* анимация движения язычка */
.is-spinning .ticker {
  animation: tick 700ms cubic-bezier(0.34, 1.56, 0.64, 1);
}


/* эффект, когда колесо задевает язычок при вращении */
@keyframes tick {
  40% {
    /* чуть поворачиваем язычок наверх в середине анимации */
    transform: rotate(-12deg);
  }
}

/* анимируем выпавший сектор */
.prize.selected .text {
  /* делаем текст белым */
  color: white;
  /* настраиваем длительность анимации */
  animation: selected 800ms ease;
}

/* настраиваем анимацию текста на выпавшем секторе по кадрам */
@keyframes selected {

  /* что происходит на 25% от начала анимации */
  25% {
    /* увеличиваем текст в 1,25 раза */
    transform: scale(1.25);
    /* добавляем тексту тень */
    text-shadow: 1vmin 1vmin 0 hsla(0 0% 0% / 0.1);
  }

  40% {
    transform: scale(0.92);
    text-shadow: 0 0 0 hsla(0 0% 0% / 0.2);
  }

  60% {
    transform: scale(1.02);
    text-shadow: 0.5vmin 0.5vmin 0 hsla(0 0% 0% / 0.1);
  }

  75% {
    transform: scale(0.98);
  }

  85% {
    transform: scale(1);
  }
}

.is-spinning .image {
  /* Анимация вращения */
  transition: transform 8s cubic-bezier(0.1, -0.01, 0, 1);
  transform: rotate(calc(var(--rotate, 25) * 1deg));
}

.img-box {
  display: flex;
  z-index: -1;
  align-items: center;
  justify-content: center;
  animation-fill-mode: forwards;
}

.image {
  transform: rotate(calc(var(--rotate, 25) * 1deg));
  width: 649px;
  animation-fill-mode: forwards;
}

.result-image {
  display: flex;
  align-items: center;
  justify-content: center;

  img {
    max-width: 500px;
    max-height: 500px;
  }

  &.hidden {
    display: none;
  }
}

/* ======================= result =========================== */
/* ======================= result =========================== */
/* ======================= result =========================== */

.vs_block {
  position: absolute;
  display: flex;
  width: 1920px;
  height: 1080px;
  top: -244px;
  flex-direction: column;
  justify-content: center;
  background: url("/images/vs_bg.jpg") no-repeat;
}

.bg{
  
}

.vs_hidden {
  display: none;
}

.vs_space {
  margin-top: 100px;
  text-align: center;
  position: relative;
}

.vs_space:last-child{

}

.vs_box {
  display: flex;
  justify-content: center;
  gap: 10px;
}

.vs_slot {
  width: 180px;
  height: 180px;
  border: 2px solid #ccc;
  display: flex;
  overflow: hidden;
  background-color: #0000;
}

.vs_slot img {
  width: 100%;
  height: auto;
  object-fit: cover;
}

.vs {
  position: absolute;
  width: 300px;
  height: auto;
  top: 430px;
  left: 816px;
  z-index: 2;
}